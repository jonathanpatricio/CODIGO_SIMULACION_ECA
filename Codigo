# Función que crea la población del ECA con dos y tres brazos de tratamiento
Pob_ECA <- function(n, t, b0, b1, b2, b3, b4, b5, var_v0i, var_v1i, cov_v0iv1i, var_eij) {
  # Semilla para fijar los números aleatorios
  set.seed(16)
  
  ## Librerías que utiliza la función
  library(MASS)
  library(dplyr)

  ## Parámetros del modelo
  
  # Tratamientos
  treat <- as.numeric(as.numeric(cbind(rep(0, n), rep(1, n)))) # Vector de unos y ceros Para dos brazos de tratamientos 
  
  treat_2 <- as.numeric(cbind(rep(0, n), rep(1, n), rep(0, n))) # Para tres brazos de tratamientos 
  treat_3 <- as.numeric(cbind(rep(0, n), rep(0, n), rep(1, n))) # Para tres brazos de tratamientos 
  
  
  # Tamaño total de la población
  n_2 <- n*2  # Para dos brazos de tratamiento
  n_3 <- n*3  # Para tres brazos de tratamiento
  
  # t_ij 
  t_j <- ((1:t)-1)/(t-1) # Estandarizando el vector que contiene los tiempos 
  tij  <- matrix(rep(t_j), nrow = n_2, ncol = t, byrow = TRUE)    # Para dos brazos de tratamiento 
  tij_ <- matrix(rep(t_j), nrow = n_3, ncol = t, byrow = TRUE)    # Para tres brazos de tratamiento
  
  # Errores eij
  mu_eij <- rep(0, t) # promedio de los errores # Vector de las medias de los errores
  cov_eij <- 0 # Covarianza de los errores
  sigma_eij <- matrix(rep(cov_eij, t*t), nrow = t, ncol = t); diag(sigma_eij) <- rep(var_eij, t) # Matriz de varianzas y covarianzas
  
  eij  <- mvrnorm(n_2, mu_eij, sigma_eij) # Errores de acuerdo con los parámetros establecidos. Para dos brazos de tratamiento
  eij_ <- mvrnorm(n_3, mu_eij, sigma_eij) # Errores de acuerdo con los parámetros establecidos. Para tres brazos de tratamiento
    
  # Efectos aleatorios
  mu_v0iv1i  <- rep(0, 2) # promedio de los efectos aleatorios
  sigma_v0iv1i  <- matrix(rep(cov_v0iv1i, 4), nrow = 2, ncol = 2); diag(sigma_v0iv1i) <- c(var_v0i, var_v1i) # Matriz de varianzas y covarianzas
  
  v_i  <- mvrnorm(n_2, mu_v0iv1i, sigma_v0iv1i) #efectos aleatorios de acuerdo con los parámetros establecidos
  v_i_ <- mvrnorm(n_3, mu_v0iv1i, sigma_v0iv1i) #efectos aleatorios de acuerdo con los parámetros establecidos
  
  # Efecto aleatorio del intercepto v_0i
  v0i  <- v_i[,1]   # Para dos brazos de tratamiento
  v0i_ <- v_i_[,1]  # Para tres brazos de tratamiento
  
  # Efecto aleatorio de la pendiente v_1i
  v1i <- v_i[,2]    # Para dos brazos de tratamiento
  v1i_ <- v_i_[,2]  # Para tres brazos de tratamiento
  
  # Beta_0
  b0_ <- b0 
  b0 <- b0 
  
    # Beta_1
  b1_ <- b1 
  b1 <- b1 
  
  # Beta_2
  b2_ <- b2 * treat_2
  b2 <- b2 * treat
  
  # Beta_3
  b3_ <- b3 * treat_2
  b3 <- b3 * treat
  
  # Beta_4
  b4_ <- b4 * treat_3
  
  # Beta_5
  b5_ <- b5 * treat_3
  
  # estimación y_ij a lo ancho
  yij_2_treat <- as.data.frame(b0   + b2  +       v0i  + b1  * tij   + b3  * tij   +              v1i  * tij  + eij  )
  yij_3_treat <- as.data.frame(b0_  + b2_ + b4_ + v0i_ + b1_ * tij_  + b3_ * tij_  + b5_ * tij_ + v1i_ * tij_ + eij_ )
  
  # Añadiendo ID y el identificador de los brazos de tratamiento a los datos simulados con dos brazos tratamiento
  grupos <- as.numeric(as.numeric(cbind(rep(1, n), rep(2, n))))              # Creando un vector tipo factor para dos brazos de tratamiento
  yij_2_treat <- mutate(yij_2_treat, treat = as.factor(grupos), ID = 1:n_2)  # Agregando el ID y el brazo de tratamiento a los datos simulados a lo ancho
  
  # Añadiendo ID y el identificador de los brazos de tratamiento a los datos simulados con tres brazos de tratamiento
  grupos_ <- as.factor(cbind(rep(1, n), rep(2, n), rep(3, n)))    # Creando un vector tipo factor para dos brazos de tratamiento
  yij_3_treat <- mutate(yij_3_treat, treat = grupos_, ID = 1:n_3) # Agregando el ID y el brazo de tratamiento a los datos simulados a lo ancho
  
  # estimación y_ij a lo largo
  yij_2_treat_long <- reshape(data = yij_2_treat,varying = 1:t, v.names = "yij", timevar= "tiempo", idvar = "ID", direction = "long") # Para dos brazos de tratamiento
  yij_3_treat_long <- reshape(data = yij_3_treat,varying = 1:t, v.names = "yij", timevar= "tiempo", idvar = "ID", direction = "long") # Para tres brazos de tratamiento
  
  # Matriz de correlación 
  cor_2_treat <- cor(yij_2_treat[,1:t])  # Para dos brazos de tratamiento
  cor_3_treat <- cor(yij_3_treat[,1:t])  # Para tres brazos de tratamiento
  
  # Listado de resultados
  resul_2_treat <- list(yij_2 = yij_2_treat, yij_long_2 = yij_2_treat_long, v_i_2 = v_i,  eij_2 = eij, cor_2 = cor_2_treat)  # Para dos brazos de tratamiento
  resul_3_treat <- list(yij_3 = yij_3_treat, yij_long_3 = yij_3_treat_long, v_i_3 = v_i_, eij_3 = eij_, cor_3 = cor_3_treat) # Para tres brazos de tratamiento
  
  return(list(Treat_2 = resul_2_treat, Treat_3 = resul_3_treat ))
  
}

# Estableciento valores a la función creada para simular los datos del ECA con dos y tres brazos de tratamiento
estimaciones <- Pob_ECA(n = 5000, 
                        t = 8, 
                        b0 = 44.9, 
                        b1 = 0.11, 
                        b2 = -2.3, 
                        b3 = 0, 
                        b4 = -2.3, 
                        b5 = 0,
                        var_v0i = 10, 
                        var_v1i = 0.33, 
                        cov_v0iv1i = -0.6207212, 
                        var_eij = 22.09)

###########################################################################################################################
## Función para comparar los modelos para dos brazos de tratamiento
#Funcion
Comp_poder_2_treat <- function(yij_2_treat, sample_min, sample_max, repeticiones, t) {

#Semilla
set.seed(16)

#Librerías
library(dplyr)
library(gee)
library(ggplot2)

#Muestras

#Matrices
Gee_intercanbiable <- matrix(0,(sample_max-sample_min),repeticiones)

#Bucle
for (i in sample_min:sample_max) {for(j in 1:repeticiones){

sample_treat_1 <- yij_2_treat[sample(x = 1:(nrow(yij_2_treat)/2), size = i, replace = FALSE),]
sample_treat_2 <- yij_2_treat[sample(x = (nrow(yij_2_treat)/2+1):nrow(yij_2_treat), size = i, replace = FALSE),]
sample <- bind_rows(sample_treat_1,sample_treat_2)

sample_long <- reshape(data = sample,varying = 1:t, v.names = "yij", timevar= "tiempo", idvar = "ID", direction = "long")
sample_long <- arrange(sample_long,ID,tiempo)
sample_long$tiempo <- as.numeric(sample_long$tiempo)
sample_long$tiempo <- (sample_long$tiempo-1)/(t-1)

#Modelos
intercanbiable <- gee(yij ~ treat + tiempo + treat * tiempo, id = ID, data = sample_long, family = gaussian, corstr = "exchangeable")


#Completando las matrices con la desición de la hipótesis
Gee_intercanbiable[i-sample_min,j] <-if(pnorm(as.matrix(intercanbiable$coefficients)[4,]/sqrt(intercanbiable$robust.variance[4,4]),0,1) < 0.05) 1 else 0

}}

#Base de datos
Gee_inter <- as.data.frame(apply(X = Gee_intercanbiable, MARGIN = 1, FUN = mean))

Base <- mutate(Gee_inter,ID = sample_min:(sample_max-1))

Grafico <- ggplot(data = Base, aes(y = `apply(X = Gee_intercanbiable, MARGIN = 1, FUN = mean)`, x = ID)) +
  geom_point(alpha=0.3,size=1) +
  geom_smooth(method=loess, se=FALSE) +
  theme_classic() +
  labs(title="P", y="Prop. Rechazo Ho", x="Tamaño de muestra", caption="Fuente: Simulación")

return(list(Base = Base, Grafico = Grafico))
}

# Estableciento valores a la función creada para simular los datos del ECA con dos y tres brazos de tratamiento

Comp_poder_2_treat(yij_2_treat = yij_2_treat, 
                   sample_min = 10, 
                   sample_max = 40, 
                   repeticiones = 15, 
                   t = 8)


